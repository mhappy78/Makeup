import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';
import '../models/app_state.dart';

/// Î∑∞Ìã∞ Ï†êÏàò ÎπÑÍµê Í≤∞Í≥º ÌëúÏãú ÏúÑÏ†Ø
class BeautyComparisonWidget extends StatelessWidget {
  const BeautyComparisonWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<AppState>(
      builder: (context, appState, child) {
        final comparison = appState.beautyAnalysis['comparison'] as Map<String, dynamic>?;
        
        // GPT Î∂ÑÏÑù Ï§ëÏùº Îïå Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ ÌëúÏãú
        if (appState.isGptAnalyzing) {
          return Container(
            margin: const EdgeInsets.all(16),
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Theme.of(context).colorScheme.primaryContainer.withOpacity(0.3),
                  Theme.of(context).colorScheme.secondaryContainer.withOpacity(0.3),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
                width: 2,
              ),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        valueColor: AlwaysStoppedAnimation<Color>(
                          Theme.of(context).colorScheme.primary,
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Flexible(
                      child: Text(
                        appState.isReAnalyzing 
                          ? 'ü§ñ AI Ï†ÑÎ¨∏Í∞ÄÍ∞Ä Ïû¨ÏßÑÎã® Í≤∞Í≥ºÎ•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...'
                          : 'ü§ñ AI Ï†ÑÎ¨∏Í∞ÄÍ∞Ä ÏßÑÎã® Í≤∞Í≥ºÎ•º Î∂ÑÏÑù Ï§ëÏûÖÎãàÎã§...',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 2,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Text(
                  'Î≥ÄÌôîÎêú Î∑∞Ìã∞ Ï†êÏàòÎ•º Î∞îÌÉïÏúºÎ°ú ÎßûÏ∂§Ìòï Î∂ÑÏÑùÍ≥º Ï∂îÏ≤úÏÇ¨Ìï≠ÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî.',
                  textAlign: TextAlign.center,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.grey.shade600,
                  ),
                  overflow: TextOverflow.ellipsis,
                  maxLines: 3,
                ),
              ],
            ),
          );
        }
        
        if (comparison == null || comparison['isReAnalysis'] != true) {
          return const SizedBox.shrink();
        }

        return Container(
          margin: const EdgeInsets.all(16),
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                Theme.of(context).colorScheme.primaryContainer.withOpacity(0.3),
                Theme.of(context).colorScheme.secondaryContainer.withOpacity(0.3),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(
              color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
              width: 2,
            ),
          ),
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Ìó§Îçî
                Row(
                  children: [
                    Icon(
                      Icons.analytics,
                      color: Theme.of(context).colorScheme.primary,
                      size: 24,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      'üîÑ Ïû¨ÏßÑÎã® Í≤∞Í≥º ÎπÑÍµê',
                      style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).colorScheme.primary,
                      ),
                    ),
                    const Spacer(),
                    Flexible(
                      child: _buildOverallChangeChip(context, comparison['overallChange'] as String),
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                // Ï†êÏàò Î≥ÄÌôî ÌëúÏãú
                _buildScoreChanges(context, comparison['scoreChanges'] as Map<String, double>),
                
                const SizedBox(height: 16),
                
                // GPT Î∂ÑÏÑù ÌÖçÏä§Ìä∏
                if (comparison['analysisText'] != null && (comparison['analysisText'] as String).isNotEmpty) ...[
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.surface.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(
                              Icons.psychology,
                              size: 20,
                              color: Theme.of(context).colorScheme.primary,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'AI Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù',
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        _buildRichAnalysisText(context, comparison['analysisText'] as String),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                ],
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildOverallChangeChip(BuildContext context, String overallChange) {
    Color chipColor;
    String chipText;
    IconData chipIcon;

    switch (overallChange) {
      case 'improved':
        chipColor = Colors.green;
        chipText = 'Í∞úÏÑ†Îê®';
        chipIcon = Icons.trending_up;
        break;
      case 'declined':
        chipColor = Colors.red;
        chipText = 'Î≥ÄÌôîÌïÑÏöî';
        chipIcon = Icons.trending_down;
        break;
      default:
        chipColor = Colors.orange;
        chipText = 'Ïú†ÏßÄ';
        chipIcon = Icons.trending_flat;
    }

    return Chip(
      avatar: Icon(chipIcon, size: 16, color: Colors.white),
      label: Text(
        chipText,
        style: const TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.w600,
          fontSize: 12,
        ),
      ),
      backgroundColor: chipColor,
    );
  }

  Widget _buildScoreChanges(BuildContext context, Map<String, double> scoreChanges) {
    if (scoreChanges.isEmpty) return const SizedBox.shrink();

    final scoreItems = <Widget>[];
    
    scoreChanges.forEach((key, change) {
      if (key == 'overall') return; // Ï†ÑÏ≤¥ Ï†êÏàòÎäî Î≥ÑÎèÑ ÌëúÏãú
      
      String displayName = _getDisplayName(key);
      Color changeColor = change > 0 ? Colors.green : (change < 0 ? Colors.red : Colors.grey);
      String changeText = change > 0 ? '+${change.round()}Ï†ê' : '${change.round()}Ï†ê';
      
      scoreItems.add(
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 2),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(child: Text(displayName)),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: changeColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: changeColor.withOpacity(0.3)),
                ),
                child: Text(
                  changeText,
                  style: TextStyle(
                    color: changeColor,
                    fontWeight: FontWeight.w600,
                    fontSize: 12,
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    });

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'üìä Ìï≠Î™©Î≥Ñ Ï†êÏàò Î≥ÄÌôî',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface.withOpacity(0.8),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Column(children: scoreItems),
        ),
      ],
    );
  }

  String _getDisplayName(String key) {
    switch (key) {
      case 'verticalScore':
        return 'Í∞ÄÎ°ú Ìô©Í∏àÎπÑÏú®';
      case 'horizontalScore':
        return 'ÏÑ∏Î°ú ÎåÄÏπ≠ÏÑ±';
      case 'lowerFaceScore':
        return 'ÌïòÍ¥Ä Ï°∞Ìôî';
      case 'symmetry':
        return 'Ï†ÑÏ≤¥ ÎåÄÏπ≠ÏÑ±';
      case 'eyeScore':
        return 'Îàà';
      case 'noseScore':
        return 'ÏΩî';
      case 'lipScore':
        return 'ÏûÖÏà†';
      case 'jawScore':
        return 'ÌÑ± Í≥°Î•†';
      default:
        return key;
    }
  }

  /// AI Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù ÌÖçÏä§Ìä∏Î•º 2Î≤à Ìï≠Î™©ÍπåÏßÄÎßå ÌëúÏãú
  Widget _buildTruncatedAnalysisText(BuildContext context, String text) {
    // --- Íµ¨Î∂ÑÏÑ† Ïù¥Ï†ÑÏùò ÎÇ¥Ïö©Îßå ÏÇ¨Ïö© (1, 2Î≤à Î∂ÑÏÑù Î∂ÄÎ∂Ñ)
    final parts = text.split('---');
    final analysisOnly = parts[0].trim();
    
    return Text(
      analysisOnly,
      style: Theme.of(context).textTheme.bodyMedium,
    );
  }

  /// AI Ï†ÑÎ¨∏Í∞Ä Î∂ÑÏÑù ÌÖçÏä§Ìä∏Î•º Î¶¨Ïπò ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò (Ï¥àÍ∏∞ Î∂ÑÏÑùÍ≥º ÎèôÏùºÌïú Ïä§ÌÉÄÏùº)
  Widget _buildRichAnalysisText(BuildContext context, String text) {
    final lines = text.split('\n');
    final List<Widget> widgets = [];
    
    for (String line in lines) {
      line = line.trim();
      if (line.isEmpty) continue;
      
      // ### 1. Ï†ÑÎ∞òÏ†ÅÏù∏ Î≥ÄÌôî ÏöîÏïΩ, ### 2. Ìï≠Î™©Î≥Ñ ÏÉÅÏÑ∏ Î∂ÑÏÑù ÌòïÌÉúÏùò Î©îÏù∏ Ï†úÎ™©
      if (line.startsWith('### 1.') || line.startsWith('### 2.') || line.startsWith('1.') || line.startsWith('2.')) {
        widgets.add(Padding(
          padding: EdgeInsets.only(bottom: 8, top: widgets.isEmpty ? 0 : 16),
          child: _buildRichTextLine(context, line, TextType.mainTitle),
        ));
      }
      // Í∞úÏÑ†Îêú Ï†ê: ÌòïÌÉúÏùò ÏÑúÎ∏å Ï†úÎ™© (Ïù¥Î™®ÏßÄ Î∞è : Ï†úÍ±∞)
      else if (line.contains('Í∞úÏÑ†Îêú Ï†ê')) {
        String cleanLine = line.replaceAll('üü¢', '').replaceAll(':', '').trim();
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 6, top: 12),
          child: _buildRichTextLine(context, cleanLine, TextType.subTitle),
        ));
      }
      // ÏïÑÏâ¨Ïö¥ Ï†ê: ÌòïÌÉúÏùò ÏÑúÎ∏å Ï†úÎ™© (Ïù¥Î™®ÏßÄ Î∞è : Ï†úÍ±∞)
      else if (line.contains('ÏïÑÏâ¨Ïö¥ Ï†ê')) {
        String cleanLine = line.replaceAll('üî∏', '').replaceAll(':', '').trim();
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 6, top: 12),
          child: _buildRichTextLine(context, cleanLine, TextType.subTitle),
        ));
      }
      // - Ìï≠Î™©Î™Ö: ÎÇ¥Ïö© ÌòïÌÉúÏùò Î¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú
      else if (line.startsWith('-')) {
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 6, left: 16),
          child: _buildRichTextLine(context, line, TextType.body),
        ));
      }
      // ÏùºÎ∞ò Î≥∏Î¨∏ ÌÖçÏä§Ìä∏
      else {
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 6),
          child: _buildRichTextLine(context, line, TextType.body),
        ));
      }
    }
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: widgets,
    );
  }

  /// ÏºÄÏñ¥ ÌåÅ ÌÖçÏä§Ìä∏Î•º Î¶¨Ïπò ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò (Ï¥àÍ∏∞ Î∂ÑÏÑùÍ≥º ÎèôÏùºÌïú Ïä§ÌÉÄÏùº)
  Widget _buildRichCareTipText(BuildContext context, String text) {
    final lines = text.split('\n');
    final List<Widget> widgets = [];
    
    for (String line in lines) {
      line = line.trim();
      if (line.isEmpty) continue;
      
      // üéØ **Í∞ÄÎ°ú Ìô©Í∏àÎπÑÏú® Í∞úÏÑ†** ÌòïÌÉúÏùò Î©îÏù∏ Ï†úÎ™©
      if (line.contains('üéØ') && line.contains('**')) {
        widgets.add(Padding(
          padding: EdgeInsets.only(bottom: 8, top: widgets.isEmpty ? 0 : 16),
          child: _buildRichTextLine(context, line, TextType.mainTitle),
        ));
      }
      // üí™ **Ïö¥Îèô/ÏäµÍ¥Ä**: ÌòïÌÉúÏùò ÏÑúÎ∏å Ï†úÎ™©
      else if ((line.contains('üí™') || line.contains('üè•')) && line.contains('**')) {
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 6, top: 12),
          child: _buildRichTextLine(context, line, TextType.subTitle),
        ));
      }
      // Îã®ÏàúÌûà üéØ, üí™, üè• ÏïÑÏù¥ÏΩòÎßå ÏûàÎäî ÎùºÏù∏ (Î≥ºÎìú ÏóÜÏùå)
      else if (line.contains('üéØ') || line.contains('üí™') || line.contains('üè•')) {
        widgets.add(Padding(
          padding: EdgeInsets.only(bottom: 6, top: widgets.isEmpty ? 0 : 12),
          child: _buildRichTextLine(context, line, TextType.title),
        ));
      }
      // **Î≥ºÎìú** ÌÖçÏä§Ìä∏Îßå ÏûàÎäî ÏÜåÏ†úÎ™©
      else if (line.contains('**')) {
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 4, top: 8),
          child: _buildRichTextLine(context, line, TextType.subtitle),
        ));
      }
      // ÏùºÎ∞ò Î≥∏Î¨∏ ÌÖçÏä§Ìä∏ (Îì§Ïó¨Ïì∞Í∏∞ 16px)
      else {
        widgets.add(Padding(
          padding: const EdgeInsets.only(bottom: 6, left: 16),
          child: _buildRichTextLine(context, line, TextType.body),
        ));
      }
    }
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: widgets,
    );
  }

  /// URL ÌÅ¥Î¶≠ Í∏∞Îä•Ïù¥ ÏûàÎäî Î¶¨Ïπò ÌÖçÏä§Ìä∏ ÎùºÏù∏ ÏÉùÏÑ±
  Widget _buildRichTextLine(BuildContext context, String text, TextType type) {
    // **Î≥ºÎìú** Î∞è ### ÎßàÌÅ¨Îã§Ïö¥ Ìó§Îçî Ï†úÍ±∞
    text = text.replaceAll('**', '').replaceAll('###', '').trim();
    
    // URLÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    if (text.contains('http')) {
      return _buildTextWithLinks(context, text, type);
    } else {
      return SelectableText(
        text,
        style: _getTextStyle(context, type),
      );
    }
  }

  /// URLÏù¥ Ìè¨Ìï®Îêú ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨
  Widget _buildTextWithLinks(BuildContext context, String text, TextType type) {
    final urlPattern = RegExp(r'\[([^\]]+)\]\((https?://[^\s\)]+)\)');
    final matches = urlPattern.allMatches(text);
    
    if (matches.isEmpty) {
      return SelectableText(text, style: _getTextStyle(context, type));
    }

    List<InlineSpan> spans = [];
    int lastIndex = 0;

    for (final match in matches) {
      // URL Ïù¥Ï†Ñ ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
      if (match.start > lastIndex) {
        spans.add(TextSpan(
          text: text.substring(lastIndex, match.start),
          style: _getTextStyle(context, type),
        ));
      }

      // ÌÅ¥Î¶≠ Í∞ÄÎä•Ìïú URL Ï∂îÍ∞Ä
      final linkText = match.group(1)!;
      final url = match.group(2)!;
      
      spans.add(TextSpan(
        text: linkText,
        style: _getTextStyle(context, type).copyWith(
          color: Colors.lightGreen.shade700, // Ïó∞ÎëêÏÉâ
          decoration: TextDecoration.underline,
        ),
        recognizer: TapGestureRecognizer()
          ..onTap = () async {
            if (await canLaunchUrl(Uri.parse(url))) {
              await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
            }
          },
      ));

      lastIndex = match.end;
    }

    // ÎßàÏßÄÎßâ Î∂ÄÎ∂Ñ Ï∂îÍ∞Ä
    if (lastIndex < text.length) {
      spans.add(TextSpan(
        text: text.substring(lastIndex),
        style: _getTextStyle(context, type),
      ));
    }

    return SelectableText.rich(
      TextSpan(children: spans),
    );
  }

  /// ÌÖçÏä§Ìä∏ ÌÉÄÏûÖÏóê Îî∞Î•∏ Ïä§ÌÉÄÏùº Î∞òÌôò
  TextStyle _getTextStyle(BuildContext context, TextType type) {
    switch (type) {
      case TextType.mainTitle:
        return Theme.of(context).textTheme.titleMedium!.copyWith(
          fontWeight: FontWeight.bold,
          color: Colors.green.shade700,
          fontSize: 16,
        );
      case TextType.subTitle:
        return Theme.of(context).textTheme.bodyMedium!.copyWith(
          fontWeight: FontWeight.bold,
          color: Colors.green.shade700,
          fontSize: 14,
        );
      case TextType.title:
        return Theme.of(context).textTheme.bodyMedium!.copyWith(
          fontWeight: FontWeight.bold,
          color: Colors.green.shade700,
          fontSize: 15,
        );
      case TextType.subtitle:
        return Theme.of(context).textTheme.bodyMedium!.copyWith(
          fontWeight: FontWeight.normal,
          color: Colors.grey.shade800,
          fontSize: 14,
        );
      case TextType.body:
        return Theme.of(context).textTheme.bodyMedium!.copyWith(
          fontWeight: FontWeight.normal,
          color: Colors.grey.shade800,
          fontSize: 14,
        );
    }
  }
}

enum TextType { mainTitle, subTitle, title, subtitle, body }